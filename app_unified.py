#!/usr/bin/env python3
"""
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ —á–µ—Ä–µ–∑ OpenAI API
"""

import os
import os
import json
import math
import time
import subprocess
import logging
from pathlib import Path
from datetime import datetime
from flask import Flask, request, jsonify, render_template, Response, send_file, session
from werkzeug.utils import secure_filename
import whisper
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 500 * 1024 * 1024  # 500MB
app.secret_key = os.getenv('SECRET_KEY', 'dev-secret-key-change-in-production')

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs('.taskmaster/protocols', exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
openai_client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Whisper
print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper...")
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å large –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (~3GB)
model = whisper.load_model("large")

ALLOWED_EXTENSIONS = {
    'audio': ['.mp3', '.wav', '.m4a', '.ogg', '.flac', '.wma'],
    'video': ['.mp4', '.avi', '.mov', '.mkv', '.flv', '.webm', '.m4v', '.wmv']
}

def allowed_file(filename):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤"""
    ext = Path(filename).suffix.lower()
    for extensions in ALLOWED_EXTENSIONS.values():
        if ext in extensions:
            return True
    return False

def get_file_type(filename):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ (audio/video)"""
    ext = Path(filename).suffix.lower()
    for file_type, extensions in ALLOWED_EXTENSIONS.items():
        if ext in extensions:
            return file_type
    return 'unknown'

def get_audio_duration(audio_path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ffmpeg"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(audio_path):
            logger.error(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {audio_path}")
            return 0
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(audio_path)
        if file_size == 0:
            logger.error(f"–§–∞–π–ª –ø—É—Å—Ç–æ–π: {audio_path}")
            return 0
            
        cmd = [
            'ffmpeg', '-i', audio_path, '-f', 'null', '-'
        ]
        result = subprocess.run(cmd, stderr=subprocess.PIPE, text=True, timeout=30)
        
        # –ü–æ–∏—Å–∫ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –≤—ã–≤–æ–¥–µ stderr
        for line in result.stderr.split('\n'):
            if 'Duration:' in line:
                try:
                    duration_str = line.split('Duration:')[1].split(',')[0].strip()
                    h, m, s = duration_str.split(':')
                    duration = float(h) * 3600 + float(m) * 60 + float(s)
                    if duration > 0:
                        return duration
                except (ValueError, IndexError) as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
                    continue
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ Duration, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ Duration –¥–ª—è {audio_path}")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∏—Å–ø–æ–ª—å–∑—É–µ–º ffprobe
        try:
            cmd_probe = [
                'ffprobe', '-v', 'quiet', '-show_entries', 'format=duration',
                '-of', 'default=noprint_wrappers=1:nokey=1', audio_path
            ]
            result_probe = subprocess.run(cmd_probe, stdout=subprocess.PIPE, text=True, timeout=30)
            if result_probe.stdout.strip():
                duration = float(result_probe.stdout.strip())
                if duration > 0:
                    return duration
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ ffprobe: {e}")
        
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {audio_path}")
        return 0
        
    except subprocess.TimeoutExpired:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {audio_path}")
        return 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return 0

def extract_audio_from_video(video_path, audio_path):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
    try:
        cmd = [
            'ffmpeg', '-i', video_path, '-vn', '-acodec', 'pcm_s16le',
            '-ar', '16000', '-ac', '1', audio_path, '-y'
        ]
        subprocess.run(cmd, check=True, capture_output=True)
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
        return False

def chunk_audio_file(audio_path, chunk_duration=300):
    """–†–∞–∑–±–∏–µ–Ω–∏–µ –∞—É–¥–∏–æ –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    duration = get_audio_duration(audio_path)
    if duration <= chunk_duration:
        return [audio_path]
    
    num_chunks = math.ceil(duration / chunk_duration)
    chunks = []
    
    for i in range(num_chunks):
        start_time = i * chunk_duration
        chunk_path = f"{audio_path}_chunk_{i}.wav"
        
        cmd = [
            'ffmpeg', '-i', audio_path, '-ss', str(start_time),
            '-t', str(chunk_duration), '-acodec', 'pcm_s16le',
            '-ar', '16000', '-ac', '1', chunk_path, '-y'
        ]
        
        try:
            subprocess.run(cmd, check=True, capture_output=True)
            chunks.append(chunk_path)
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞ {i}: {e}")
    
    return chunks

def transcribe_audio(audio_path, language=None):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å Whisper"""
    try:
        duration = get_audio_duration(audio_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
        if duration <= 0:
            raise ValueError("–ê—É–¥–∏–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(audio_path)
        if file_size == 0:
            raise ValueError("–ê—É–¥–∏–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π (0 –±–∞–π—Ç)")
        
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Ä–∞–∑–º–µ—Ä—É, –Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        duration_limit = 600  # 10 –º–∏–Ω—É—Ç
        duration = get_audio_duration(audio_path)
        
        if duration > duration_limit:
            # –†–∞–∑–±–∏–≤–∞–µ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –Ω–∞ —á–∞–Ω–∫–∏
            chunks = chunk_audio_file(audio_path, chunk_duration=duration_limit)
            full_transcription = []
            all_segments = []
            
            for i, chunk_path in enumerate(chunks):
                try:
                    result = model.transcribe(chunk_path, language=language, word_timestamps=True)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —á–∞–Ω–∫–∞
                    if not result or "text" not in result:
                        logger.warning(f"–ß–∞–Ω–∫ {i+1} –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                        
                    if result["text"].strip():
                        full_transcription.append(result["text"])
                    else:
                        logger.warning(f"–ß–∞–Ω–∫ {i+1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞")
                        
                except Exception as chunk_error:
                    error_msg = str(chunk_error)
                    if "cannot reshape tensor" in error_msg or "0 elements" in error_msg:
                        logger.warning(f"–ß–∞–Ω–∫ {i+1} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {error_msg}")
                        continue
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞ {i+1}: {error_msg}")
                        continue
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                if "segments" in result:
                    segments = []
                    for segment in result["segments"]:
                        segments.append({
                            "start": segment["start"],
                            "end": segment["end"],
                            "text": segment["text"]
                        })
                    all_segments.extend(segments)
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
                if chunk_path != audio_path:
                    try:
                        os.remove(chunk_path)
                    except:
                        pass
            
            if not full_transcription:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω —á–∞–Ω–∫ –∞—É–¥–∏–æ")
                
            return {"text": " ".join(full_transcription), "segments": all_segments}
        else:
            # –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é
            result = model.transcribe(audio_path, language=language, word_timestamps=True)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            segments = []
            if "segments" in result:
                for segment in result["segments"]:
                    segments.append({
                        "start": segment["start"],
                        "end": segment["end"],
                        "text": segment["text"]
                    })
            
            return {
                "text": result["text"],
                "segments": segments,
                "language": result.get("language", "unknown")
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        raise



def transcribe_audio_with_progress(audio_path, language=None):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å Whisper —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ—Ç–¥–∞—á–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(audio_path):
            raise ValueError(f"–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(audio_path)
        if file_size == 0:
            raise ValueError("–ê—É–¥–∏–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π (0 –±–∞–π—Ç)")
            
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (1KB)
        if file_size < 1024:
            raise ValueError(f"–ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª ({file_size} –±–∞–π—Ç). –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 1KB")
        
        duration = get_audio_duration(audio_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
        if duration <= 0:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å–µ —Ä–∞–≤–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Whisper, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ {audio_path}, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é")
            yield {"progress": 10, "status": "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞..."}
            
            try:
                # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –Ω–∞–ø—Ä—è–º—É—é –≤ Whisper –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                import whisper
                audio = whisper.load_audio(audio_path)
                if len(audio) == 0:
                    raise ValueError("–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
                # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, —Ñ–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                duration = len(audio) / 16000  # Whisper –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 16kHz
                logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ Whisper: {duration:.2f} —Å–µ–∫")
            except Exception as e:
                raise ValueError(f"–ê—É–¥–∏–æ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {str(e)}")
        
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Ä–∞–∑–º–µ—Ä—É, –Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        duration_limit = 600  # 10 –º–∏–Ω—É—Ç
        
        if duration > duration_limit:
            # –†–∞–∑–±–∏–≤–∞–µ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –Ω–∞ —á–∞–Ω–∫–∏
            yield {"progress": 15, "status": "–†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏..."}
            chunks = chunk_audio_file(audio_path, chunk_duration=duration_limit)
            full_transcription = []
            all_segments = []
            
            for i, chunk_path in enumerate(chunks):
                progress = 15 + int((i / len(chunks)) * 80)
                yield {"progress": progress, "status": f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ {i+1}/{len(chunks)}..."}
                
                try:
                    result = model.transcribe(chunk_path, language=language, word_timestamps=True)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                    if not result or not result.get("text", "").strip():
                        logger.warning(f"–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —á–∞–Ω–∫–∞ {i+1}")
                        continue
                        
                    full_transcription.append(result["text"])
                except Exception as e:
                    error_msg = str(e)
                    if "cannot reshape tensor" in error_msg or "0 elements" in error_msg:
                        logger.warning(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —á–∞–Ω–∫ {i+1}: {error_msg}")
                        continue
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ {i+1}: {error_msg}")
                        raise e
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                if "segments" in result:
                    segments = []
                    for segment in result["segments"]:
                        segments.append({
                            "start": segment["start"],
                            "end": segment["end"],
                            "text": segment["text"]
                        })
                    all_segments.extend(segments)
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
                if chunk_path != audio_path:
                    try:
                        os.remove(chunk_path)
                    except:
                        pass
            
            if not full_transcription:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω —á–∞–Ω–∫ –∞—É–¥–∏–æ")
                
            yield {"progress": 100, "status": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", "result": {"text": " ".join(full_transcription), "segments": all_segments}}
        else:
            # –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é
            yield {"progress": 5, "status": "–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ..."}
            time.sleep(0.3)
            yield {"progress": 25, "status": "–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper..."}
            time.sleep(0.3)
            yield {"progress": 45, "status": "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏..."}
            time.sleep(0.3)
            yield {"progress": 65, "status": "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞..."}
            time.sleep(0.3)
            yield {"progress": 85, "status": "–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞..."}
            time.sleep(0.3)
            
            try:
                result = model.transcribe(audio_path, language=language, word_timestamps=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
                if not result or "text" not in result:
                    raise ValueError("–ú–æ–¥–µ–ª—å Whisper –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
                    
                if not result["text"].strip():
                    raise ValueError("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∞—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ—á–∏ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
                
            except Exception as whisper_error:
                error_msg = str(whisper_error)
                if "cannot reshape tensor" in error_msg:
                    raise ValueError("–ê—É–¥–∏–æ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, WAV –∏–ª–∏ MP3)")
                elif "0 elements" in error_msg:
                    raise ValueError("–ê—É–¥–∏–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö")
                else:
                    raise ValueError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {error_msg}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            segments = []
            if "segments" in result:
                for segment in result["segments"]:
                    segments.append({
                        "start": segment["start"],
                        "end": segment["end"],
                        "text": segment["text"]
                    })
            
            yield {"progress": 100, "status": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", "result": {
                "text": result["text"],
                "segments": segments,
                "language": result.get("language", "unknown")
            }}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        raise

def generate_protocol(transcription, meeting_type="general"):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    try:
        prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª:
        
        –¢–∏–ø –≤—Å—Ç—Ä–µ—á–∏: {meeting_type}
        
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:
        {transcription}
        
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ç–æ–∫–æ–ª –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
        
        # –ü–†–û–¢–û–ö–û–õ –í–°–¢–†–ï–ß–ò
        
        ## –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: [–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏]
        
        ## –£—á–∞—Å—Ç–Ω–∏–∫–∏: [–≤—ã–¥–µ–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è]
        
        ## –ü–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è:
        1. [–æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è]
        
        ## –†–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã–µ:
        - [—Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π]
        
        ## –ü–æ—Ä—É—á–µ–Ω–∏—è:
        - [–∫—Ç–æ –∏ —á—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å, —Å—Ä–æ–∫–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã]
        
        ## –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:
        - [–≤–æ–ø—Ä–æ—Å—ã —Ç—Ä–µ–±—É—é—â–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏]
        
        ## –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:
        - [–≤–∞–∂–Ω—ã–µ –≤—ã–≤–æ–¥—ã –∏ –∏–¥–µ–∏]
        """
        
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –≤—Å—Ç—Ä–µ—á. –°–æ–∑–¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=2000,
            temperature=0.3
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
        raise

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
    try:
        if 'file' not in request.files:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        if not allowed_file(file.filename):
            return jsonify({'error': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞'}), 400
        
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path) or os.path.getsize(file_path) == 0:
            return jsonify({'error': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ - —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π'}), 400
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É—Ç–∏ –≤ —Å–µ—Å—Å–∏–∏
        session['uploaded_file'] = file_path
        
        return jsonify({
            'success': True,
            'filename': filename,
            'file_size': os.path.getsize(file_path)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/transcribe', methods=['POST'])
def transcribe_audio_route():
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø–æ—Ç–æ–∫–æ–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ session –∏ request –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    if 'uploaded_file' not in session or not os.path.exists(session['uploaded_file']):
        error_msg = json.dumps({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–Ω–∞—á–∞–ª–∞.'}, ensure_ascii=False)
        return Response(f"data: {error_msg}\n\n", mimetype='text/event-stream')
    
    audio_path = session['uploaded_file']
    language = request.form.get('language', 'auto')
    
    def generate():
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        current_audio_path = audio_path
        current_language = language
        
        try:
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
            filename = os.path.basename(current_audio_path).lower()
            file_type = get_file_type(filename)
            
            yield f"data: {json.dumps({'progress': 5, 'status': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞...'}, ensure_ascii=False)}\n\n"
            
            # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ, –∏–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
            if file_type == 'video':
                yield f"data: {json.dumps({'progress': 10, 'status': '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ...'}, ensure_ascii=False)}\n\n"
                temp_audio_path = os.path.join(app.config['UPLOAD_FOLDER'], f"audio_{Path(filename).stem}.wav")
                if not extract_audio_from_video(current_audio_path, temp_audio_path):
                    yield f"data: {json.dumps({'error': '–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ - –≤–æ–∑–º–æ–∂–Ω–æ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω'}, ensure_ascii=False)}\n\n"
                    return
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
                if not os.path.exists(temp_audio_path) or os.path.getsize(temp_audio_path) == 0:
                    yield f"data: {json.dumps({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ'}, ensure_ascii=False)}\n\n"
                    return
                
                # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª
                try:
                    os.remove(current_audio_path)
                except:
                    pass
                
                current_audio_path = temp_audio_path
            
            yield f"data: {json.dumps({'progress': 15, 'status': '–ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...'}, ensure_ascii=False)}\n\n"
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞, –µ—Å–ª–∏ auto
            if current_language == 'auto':
                current_language = None
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            try:
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞, –µ—Å–ª–∏ auto
                if current_language == 'auto':
                    current_language = None
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                for update in transcribe_audio_with_progress(current_audio_path, current_language):
                    if 'result' in update:
                        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        result = {
                            'text': update['result']["text"],
                            'filename': filename,
                            'file_type': file_type,
                            'language': current_language or 'auto',
                            'segments': update['result'].get('segments', [])
                        }
                        final_response = {
                            'progress': 100,
                            'status': '–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
                            'result': result
                        }
                        yield f"data: {json.dumps(final_response, ensure_ascii=False)}\n\n"
                    else:
                        # –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        yield f"data: {json.dumps(update, ensure_ascii=False)}\n\n"
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
                yield f"data: {json.dumps({'error': f'–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}'}, ensure_ascii=False)}\n\n"
                return
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
            try:
                os.remove(current_audio_path)
            except:
                pass
            
        except Exception as e:
            yield f"data: {json.dumps({'error': str(e)}, ensure_ascii=False)}\n\n"
            if os.path.exists(current_audio_path):
                try:
                    os.remove(current_audio_path)
                except:
                    pass
    
    return Response(generate(), mimetype='text/event-stream')

@app.route('/generate_protocol', methods=['POST'])
def generate_protocol_route():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    try:
        data = request.json
        transcription = data.get('transcription', '')
        meeting_type = data.get('meeting_type', 'general')
        
        if not transcription:
            return jsonify({'error': '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞'}), 400
        
        protocol = generate_protocol(transcription, meeting_type)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        protocol_filename = f"protocol_{timestamp}.md"
        protocol_path = os.path.join('.taskmaster/protocols', protocol_filename)
        
        with open(protocol_path, 'w', encoding='utf-8') as f:
            f.write(protocol)
        
        return jsonify({
            'success': True,
            'protocol': protocol,
            'filename': protocol_filename
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/download_protocol/<filename>')
def download_protocol(filename):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    try:
        protocol_path = os.path.join('.taskmaster/protocols', filename)
        if os.path.exists(protocol_path):
            return send_file(protocol_path, as_attachment=True)
        else:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/cleanup', methods=['POST'])
def cleanup_session():
    """–û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
    try:
        if 'uploaded_file' in session:
            file_path = session['uploaded_file']
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                except:
                    pass
            session.pop('uploaded_file', None)
        
        return jsonify({'success': True})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        'status': 'healthy',
        'whisper_model': 'small',
        'supported_formats': ALLOWED_EXTENSIONS
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...")
    print("üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
    print("   –ê—É–¥–∏–æ:", ', '.join(ALLOWED_EXTENSIONS['audio']))
    print("   –í–∏–¥–µ–æ:", ', '.join(ALLOWED_EXTENSIONS['video']))
    print("üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ http://localhost:5006")
    app.run(host='0.0.0.0', port=5006, debug=True)