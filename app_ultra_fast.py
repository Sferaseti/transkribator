#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞ —Å—á–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""

import os
import json
import math
import time
import subprocess
import logging
import concurrent.futures
import threading
from pathlib import Path
from datetime import datetime
from flask import Flask, request, jsonify, Response, render_template, send_from_directory, send_file, stream_with_context
from werkzeug.utils import secure_filename
import whisper
import torch
# from openai import OpenAI  # –û—Ç–∫–ª—é—á–µ–Ω–æ: —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —É–¥–∞–ª—ë–Ω
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ CPU-–∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
os.environ.setdefault('OMP_NUM_THREADS', '1')
os.environ.setdefault('MKL_NUM_THREADS', '1')
os.environ.setdefault('OPENBLAS_NUM_THREADS', '1')
os.environ.setdefault('NUMEXPR_NUM_THREADS', '1')
try:
    torch.set_num_threads(1)
    torch.set_num_interop_threads(1)
except Exception:
    pass

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger(__name__)

PORT = int(os.getenv('PORT', '5008'))  # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

app = Flask(__name__, static_folder='static', template_folder='templates')
app.config['ENV'] = 'production'  # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
app.config['DEBUG'] = False       # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É

# –î–æ–±–∞–≤–ª—è–µ–º CORS –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
@app.after_request
def after_request(response):
    response.headers['Access-Control-Allow-Origin'] = '*'
    response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'
    response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
    return response

@app.route('/upload', methods=['OPTIONS'])
def handle_options():
    return '', 204

# –î–æ–±–∞–≤–ª—è–µ–º OPTIONS –¥–ª—è /transcribe, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏–ª preflight –ø—Ä–∏ CORS
@app.route('/transcribe', methods=['OPTIONS'])
def handle_transcribe_options():
    return '', 204

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/static/<path:filename>')
def serve_static(filename):
    if filename == '@vite/client':
        return '', 404  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 404 –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ Vite
    response = send_from_directory(app.static_folder, filename)
    if filename.endswith('.js'):
        response.headers['Content-Type'] = 'application/javascript'
    elif filename.endswith('.css'):
        response.headers['Content-Type'] = 'text/css'
    return response

@app.route('/health')
def health_check():
    return jsonify({'status': 'ok', 'message': 'Server is running'})

app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 500 * 1024 * 1024  # 500MB
app.secret_key = os.getenv('SECRET_KEY', 'dev-secret-key-change-in-production')

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
# os.makedirs('.taskmaster/protocols', exist_ok=True)  # –û—Ç–∫–ª—é—á–µ–Ω–æ: –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
# openai_client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))  # –û—Ç–∫–ª—é—á–µ–Ω–æ: –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

# –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–û–ì–û –ù–ê–°–¢–†–û–ô–ö–ò
MAX_WORKERS = int(os.getenv('MAX_WORKERS', '1'))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
CHUNK_DURATION = 120  # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 2 –º–∏–Ω—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
DEFAULT_MODEL_NAME = 'tiny'  # –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å (~39MB)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
loaded_models = {}
device = 'cpu'  # CPU –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
INFERENCE_LOCK = threading.Lock()  # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ Whisper (–º–æ–¥–µ–ª—å –Ω–µ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞)

def get_whisper_model(model_name):
    """–ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª—å Whisper, –∑–∞–≥—Ä—É–∑–∏–≤ –µ—ë –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    if model_name not in loaded_models:
        print(f"üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper ({model_name})...")
        loaded_models[model_name] = whisper.load_model(model_name, device=device)
        print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    return loaded_models[model_name]

def check_ffmpeg_installed():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ffmpeg"""
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
        print('‚úÖ ffmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print('‚ùå ffmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        return False

def check_ffprobe_installed():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ffprobe"""
    try:
        subprocess.run(['ffprobe', '-version'], capture_output=True, check=True)
        print('‚úÖ ffprobe —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print('‚ùå ffprobe –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
print(f"üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–û–ô –º–æ–¥–µ–ª–∏ Whisper ({DEFAULT_MODEL_NAME})...")
model = get_whisper_model(DEFAULT_MODEL_NAME)
print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ffmpeg
check_ffmpeg_installed()

ALLOWED_EXTENSIONS = {
    'audio': ['.mp3', '.wav', '.m4a', '.ogg', '.flac', '.wma'],
    'video': ['.mp4', '.avi', '.mov', '.mkv', '.flv', '.webm', '.m4v', '.wmv'],
    'text': ['.txt']
}

def allowed_file(filename):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
    return '.' in filename and filename.lower().endswith(tuple(
        ext for ext_list in ALLOWED_EXTENSIONS.values() for ext in ext_list
    ))

def get_file_type(filename):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
    ext = Path(filename).suffix.lower()
    if ext in ALLOWED_EXTENSIONS['audio']:
        return 'audio'
    elif ext in ALLOWED_EXTENSIONS['video']:
        return 'video'
    elif ext in ALLOWED_EXTENSIONS['text']:
        return 'text'
    return 'unknown'

def get_audio_duration_fast(audio_path):
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
    try:
        cmd = ['ffmpeg', '-i', audio_path, '-f', 'null', '-']
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ stderr ffmpeg
        for line in result.stderr.split('\n'):
            if 'Duration:' in line:
                duration_str = line.split('Duration:')[1].split(',')[0].strip()
                parts = duration_str.split(':')
                if len(parts) == 3:
                    h, m, s = parts
                    return float(h) * 3600 + float(m) * 60 + float(s)
                else:
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ ffprobe
                    try:
                        probe_cmd = ['ffprobe', '-v', 'error', '-show_entries', 'format=duration', '-of', 'csv=p=0', audio_path]
                        probe_result = subprocess.run(probe_cmd, capture_output=True, text=True, timeout=5)
                        if probe_result.returncode == 0 and probe_result.stdout.strip():
                            return float(probe_result.stdout.strip())
                    except:
                        pass
        return 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return 0

def extract_audio_from_video_fast(video_path, output_path, timeout=30):
    """–ì–∏–±–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    print(f"üé¨ DEBUG: –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ: {video_path} -> {output_path}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞ —Å –±–æ–ª–µ–µ –≥–∏–±–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        try:
            probe_cmd = [
                'ffprobe', '-v', 'error', '-select_streams', 'a:0',
                '-show_entries', 'stream=codec_name,duration', '-of', 'csv=p=0',
                video_path
            ]
            
            probe_result = subprocess.run(probe_cmd, capture_output=True, text=True, timeout=10)
            
            # –î–∞–∂–µ –µ—Å–ª–∏ ffprobe –Ω–µ –Ω–∞—à–µ–ª –∞—É–¥–∏–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –≤—Å–µ —Ä–∞–≤–Ω–æ
            audio_found = probe_result.returncode == 0 and probe_result.stdout.strip()
            
        except Exception as probe_error:
            # –ï—Å–ª–∏ ffprobe –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            audio_found = None
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ffprobe –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—É–¥–∏–æ: {probe_error}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        cmd = [
            'ffmpeg', '-i', video_path, '-vn', '-acodec', 'pcm_s16le',
            '-ar', '16000', '-ac', '1', '-y', output_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=timeout)
        
        if result.returncode != 0:
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            alt_cmd = [
                'ffmpeg', '-i', video_path, '-vn', '-ar', '16000', '-ac', '1',
                '-f', 'wav', '-y', output_path
            ]
            
            alt_result = subprocess.run(alt_cmd, capture_output=True, text=True, timeout=timeout)
            
            if alt_result.returncode != 0:
                # –ü—Ä–æ–±—É–µ–º –µ—â–µ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥
                simple_cmd = [
                    'ffmpeg', '-i', video_path, '-vn', '-y', output_path
                ]
                
                simple_result = subprocess.run(simple_cmd, capture_output=True, text=True, timeout=timeout)
                
                if simple_result.returncode != 0:
                    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª")
                    empty_cmd = [
                        'ffmpeg', '-f', 'lavfi', '-i', 'anullsrc=r=16000:cl=mono',
                        '-t', '1', '-y', output_path
                    ]
                    
                    empty_result = subprocess.run(empty_cmd, capture_output=True, text=True, timeout=timeout)
                    
                    if empty_result.returncode != 0:
                        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {result.stderr}")
        
        if not os.path.exists(output_path):
            raise ValueError("–§–∞–π–ª —Å –∞—É–¥–∏–æ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
        
        return True, output_path
        
    except subprocess.TimeoutExpired:
        return False, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ"
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            empty_cmd = [
                'ffmpeg', '-f', 'lavfi', '-i', 'anullsrc=r=16000:cl=mono',
                '-t', '1', '-y', output_path
            ]
            
            empty_result = subprocess.run(empty_cmd, capture_output=True, text=True, timeout=timeout)
            
            if empty_result.returncode == 0:
                print(f"–°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ —Ñ–∞–π–ª –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {str(e)}")
                return True, output_path
            else:
                return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {str(e)}"
                
        except Exception as empty_error:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {str(e)}")

def chunk_audio_ultra_fast(audio_path, chunk_duration):
    """–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        if not os.path.exists(audio_path):
            raise ValueError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
        if os.path.getsize(audio_path) == 0:
            raise ValueError(f"–§–∞–π–ª –ø—É—Å—Ç: {audio_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ffmpeg
        cmd = ['ffmpeg', '-i', audio_path, '-f', 'null', '-']
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        has_audio = False
        for line in result.stderr.split('\n'):
            if 'Audio:' in line:
                has_audio = True
                break
        
        if not has_audio:
            raise ValueError(f"–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞: {audio_path}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration = get_audio_duration_fast(audio_path)
        if duration == 0:
            raise ValueError(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {audio_path}")
        elif duration <= chunk_duration:
            return [audio_path]
        
        num_chunks = math.ceil(duration / chunk_duration)
        chunks = []
        
        def create_chunk_fast(i):
            start_time = i * chunk_duration
            chunk_path = f"{audio_path}_chunk_{i}.wav"
            
            cmd = [
                'ffmpeg', '-i', audio_path, '-ss', str(start_time),
                '-t', str(chunk_duration), '-acodec', 'pcm_s16le',
                '-ar', '16000', '-ac', '1',
                '-af', 'highpass=200,lowpass=3000,volume=1.5',
                chunk_path, '-y'
            ]
            
            try:
                subprocess.run(cmd, check=True, capture_output=True, timeout=60)
                if not os.path.exists(chunk_path) or os.path.getsize(chunk_path) == 0:
                    raise ValueError(f"–ß–∞–Ω–∫ {i} –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç")
                actual_chunk_duration = get_audio_duration_fast(chunk_path)
                if actual_chunk_duration == 0:
                    raise ValueError(f"–ß–∞–Ω–∫ {i} –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ –≤ —á–∞–Ω–∫–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ffmpeg
                cmd = ['ffmpeg', '-i', chunk_path, '-f', 'null', '-']
                result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ –≤ stderr
                has_audio = False
                for line in result.stderr.split('\n'):
                    if 'Audio:' in line:
                        has_audio = True
                        break
                
                if not has_audio:
                    raise ValueError(f"–ß–∞–Ω–∫ {i} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞")
                    
                return chunk_path
            except Exception as e:
                if os.path.exists(chunk_path):
                    os.remove(chunk_path)
                print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞–Ω–∫–∞ {i}: {str(e)}")
                return None
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤ —Å –∂–µ—Å—Ç–∫–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        max_workers_chunk = 1
        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers_chunk) as executor:
            chunk_futures = [executor.submit(create_chunk_fast, i) for i in range(num_chunks)]
            
            for future in concurrent.futures.as_completed(chunk_futures):
                try:
                    chunk_path = future.result(timeout=30)  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
                    if chunk_path:
                        chunks.append(chunk_path)
                except concurrent.futures.TimeoutError:
                    print(f"‚ùå DEBUG: –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞–Ω–∫–∞")
                except Exception as e:
                    print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–∞–Ω–∫–∞: {str(e)}")
        
        if not chunks:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞")
            
        return sorted(chunks, key=lambda p: int(p.split('_chunk_')[-1].split('.wav')[0]))
        
    except Exception as e:
        print(f"‚ùå DEBUG: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ chunk_audio_ultra_fast: {str(e)}")
        return []

def transcribe_chunk_fast(chunk_path, language=None, model_name=DEFAULT_MODEL_NAME):
    """–ë—ã—Å—Ç—Ä–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —á–∞–Ω–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print(f"üîÑ DEBUG: –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —á–∞–Ω–∫–∞: {chunk_path}")
        print(f"üéØ DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {model_name}, —è–∑—ã–∫: {language}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
        if not os.path.exists(chunk_path) or os.path.getsize(chunk_path) == 0:
            print(f"‚ùå DEBUG: –§–∞–π–ª —á–∞–Ω–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç: {chunk_path}")
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ
        duration = get_audio_duration_fast(chunk_path)
        if duration == 0:
            print(f"‚ùå DEBUG: –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {chunk_path}")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å
        current_model = get_whisper_model(model_name)
        
        # –ü—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º (—Å–µ—Ä–∏–π–Ω–æ –∏ –±–µ–∑ FP16 –Ω–∞ CPU)
        transcribe_kwargs = {'fp16': False}
        if language and language != 'auto':
            print(f"üó£Ô∏è DEBUG: –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º: {language}")
            transcribe_kwargs['language'] = language
        else:
            print(f"üîç DEBUG: –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞")
        
        with INFERENCE_LOCK:
            result = current_model.transcribe(chunk_path, **transcribe_kwargs)
        
        if result and isinstance(result, dict) and result.get("text"):
            print(f"‚úÖ DEBUG: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(result['text'])} —Å–∏–º–≤–æ–ª–æ–≤")
            return {
                "text": result["text"].strip(),
                "segments": result.get("segments", [])
            }
        
        print(f"‚ö†Ô∏è DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
        return None
        
    except Exception as e:
        error_msg = str(e)
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ç–µ–Ω–∑–æ—Ä–æ–≤
        if any(keyword in error_msg.lower() for keyword in ["tensor", "reshape", "0 elements", "dimension"]):
            logger.warning(f"–û—à–∏–±–∫–∞ —Ç–µ–Ω–∑–æ—Ä–æ–≤ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —á–∞–Ω–∫–∞ {chunk_path}: {error_msg}")
            return {
                "text": "",
                "segments": [],
                "error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {error_msg}"
            }
        else:
            logger.warning(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —á–∞–Ω–∫–∞ {chunk_path}: {e}")
            return None

def transcribe_audio_ultra_fast(audio_path, language=None, model_name=DEFAULT_MODEL_NAME):
    """–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not os.path.exists(audio_path):
            raise ValueError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
        if os.path.getsize(audio_path) == 0:
            raise ValueError(f"–§–∞–π–ª –ø—É—Å—Ç: {audio_path}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ffmpeg
        cmd = ['ffmpeg', '-i', audio_path, '-f', 'null', '-']
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏–æ –≤ stderr
        has_audio = False
        for line in result.stderr.split('\n'):
            if 'Audio:' in line:
                has_audio = True
                break
        
        if not has_audio:
            raise ValueError(f"–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞: {audio_path}")
            
        duration = get_audio_duration_fast(audio_path)
        if duration == 0:
            raise ValueError(f"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {audio_path}")
            
        print(f"‚úÖ DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫.")
        yield {"status": f"–§–∞–π–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration//60} –º–∏–Ω {duration%60} —Å–µ–∫"}
        
        # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏
        if duration > CHUNK_DURATION * 1.5:  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            max_chunks = 10  # –ú–∞–∫—Å–∏–º—É–º 10 —á–∞–Ω–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
            effective_chunk_duration = max(CHUNK_DURATION, duration // max_chunks)
            
            print(f"üîÑ DEBUG: –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {effective_chunk_duration} —Å–µ–∫")
            yield {"status": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞–∑–±–∏–µ–Ω–∏—é –Ω–∞ —á–∞—Å—Ç–∏..."}
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            yield {"status": "–ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏..."}
            chunks = chunk_audio_ultra_fast(audio_path, effective_chunk_duration)
            
            if not chunks:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞–Ω–∫–∏")
            
            yield {"status": f"–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤..."}
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å –û–î–ù–ò–ú –ø–æ—Ç–æ–∫–æ–º (—Å–µ—Ä–∏–π–Ω–æ) –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            results_by_idx = {}
            max_workers_transcribe = 1
            with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers_transcribe) as executor:
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ—É—Ç—É—Ä—ã –∫ –∏–Ω–¥–µ–∫—Å—É —á–∞–Ω–∫–∞, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
                future_to_idx = {}
                for idx, chunk in enumerate(chunks):
                    fut = executor.submit(transcribe_chunk_fast, chunk, language, model_name)
                    future_to_idx[fut] = idx

                total = len(chunks)
                for future in concurrent.futures.as_completed(future_to_idx):
                    idx = future_to_idx[future]
                    try:
                        chunk_result = future.result(timeout=300)  # –¢–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —á–∞–Ω–∫–∞
                        if chunk_result:
                            results_by_idx[idx] = chunk_result
                            print(f"‚úÖ DEBUG: –ß–∞–Ω–∫ {idx+1}/{total} —É—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω. –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(chunk_result.get('text', ''))}")
                        else:
                            print(f"‚ùå DEBUG: –ß–∞–Ω–∫ {idx+1}/{total} –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
                    except concurrent.futures.TimeoutError:
                        print(f"‚ùå DEBUG: –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —á–∞–Ω–∫–∞ {idx+1}/{total}")
                    except Exception as e:
                        print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —á–∞–Ω–∫–∞ {idx+1}/{total}: {str(e)}")

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —á–∞–Ω–∫–∏
            for chunk in chunks:
                if os.path.exists(chunk):
                    os.remove(chunk)

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ –∏–Ω–¥–µ–∫—Å—É —á–∞–Ω–∫–∞)
            ordered_indices = sorted(results_by_idx.keys())
            full_text = " ".join(
                [results_by_idx[i]["text"] for i in ordered_indices if "text" in results_by_idx[i]]
            )
            all_segments = []
            for i in ordered_indices:
                r = results_by_idx[i]
                if "segments" in r:
                    all_segments.extend(r["segments"])

            if not full_text:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —á–∞–Ω–∫–æ–≤")

            yield {"status": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", "text": full_text, "segments": all_segments}
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ–±–æ–ª—å—à–æ–π, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º
            yield {"status": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Ü–µ–ª–∏–∫–æ–º..."}
            result = transcribe_chunk_fast(audio_path, language, model_name)
            if result and result.get("text"):
                yield {"status": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", "text": result["text"], "segments": result.get("segments", [])}
            else:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Ü–µ–ª–∏–∫–æ–º")

    except Exception as e:
        error_message = str(e)
        print(f"‚ùå DEBUG: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ transcribe_audio_ultra_fast: {error_message}")
        yield {"error": error_message}


# @app.route('/transcribe', methods=['POST'])  # disabled duplicate in favor of SSE route
def transcribe_file_disabled():
    file_path = request.json.get('file_path')
    language = request.json.get('language')
    model_name = request.json.get('model_name', DEFAULT_MODEL_NAME)

    if not file_path or not os.path.exists(file_path):
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω."}), 400

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        def generate():
            for data in transcribe_audio_ultra_fast(file_path, language, model_name):
                yield json.dumps(data) + "\n"

        return Response(generate(), mimetype='application/json')

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# @app.route('/generate_protocol', methods=['POST'])  # disabled duplicate; using generate_protocol_route instead
def generate_protocol_disabled():
    pass


if __name__ == '__main__' and False:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg –∏ ffprobe
    check_ffmpeg_installed()
    check_ffprobe_installed()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print(f"üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–û–ô –º–æ–¥–µ–ª–∏ Whisper ({DEFAULT_MODEL_NAME})...")
    get_whisper_model(DEFAULT_MODEL_NAME) # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    print(f"‚úÖ –ú–æ–¥–µ–ª—å {DEFAULT_MODEL_NAME} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

    print("üöÄ –ó–∞–ø—É—Å–∫ –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–û–ì–û —Å–µ—Ä–≤–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...")
    print(f"‚ö° –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_MODEL_NAME} (—Å–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è)")
    print(f"üíª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    print(f"üîß –ú–∞–∫—Å–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤: {MAX_WORKERS}")
    print(f"‚è±Ô∏è –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: {CHUNK_DURATION} —Å–µ–∫")
    print("üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
    print("   –ê—É–¥–∏–æ: .mp3, .wav, .m4a, .ogg, .flac, .wma")
    print("   –í–∏–¥–µ–æ: .mp4, .avi, .mov, .mkv, .flv, .webm, .m4v, .wmv")
    print(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ http://localhost:{PORT}")
    app.run(host='0.0.0.0', port=PORT, debug=False, threaded=True)


def check_ffmpeg_installed():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ffmpeg"""
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
        print('‚úÖ ffmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print('‚ùå ffmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        return False

def generate_protocol(transcription, meeting_type="general"):
    """–ó–∞–≥–ª—É—à–∫–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞."""
    return "–ü—Ä–æ—Ç–æ–∫–æ–ª –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ"

# Duplicate index route disabled to avoid conflicts
def index_duplicate_disabled():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –≥–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    """
    try:
        if 'file' not in request.files:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': '–ü—É—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Å—Ç—Ä–æ–≥–æ–π MIME –ø—Ä–æ–≤–µ—Ä–∫–∏)
        filename = secure_filename(file.filename)
        file_ext = os.path.splitext(filename)[1].lower().lstrip('.')
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        allowed_extensions = {
            # –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—ã
            'wav', 'mp3', 'm4a', 'aac', 'flac', 'ogg', 'opus', 'wma',
            # –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã  
            'mp4', 'avi', 'mov', 'mkv', 'flv', 'webm', 'm4v', '3gp', 'wmv', 'mpg', 'mpeg',
            # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            'txt', 'srt', 'vtt'
        }
        
        if file_ext not in allowed_extensions:
            return jsonify({
                'error': f'–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_ext}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {", ".join(sorted(allowed_extensions))}'
            }), 400
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"{timestamp}_{filename}"
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        
        try:
            file.save(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            file_size = os.path.getsize(file_path)
            if file_size == 0:
                os.remove(file_path)
                return jsonify({'error': '–§–∞–π–ª –ø—É—Å—Ç–æ–π'}), 400
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º MIME —Ç–∏–ø —á–µ—Ä–µ–∑ python-magic –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                import magic
                mime = magic.from_file(file_path, mime=True)
                print(f"‚úÖ DEBUG: MIME —Ç–∏–ø —Ñ–∞–π–ª–∞: {mime}")
            except ImportError:
                # –ï—Å–ª–∏ python-magic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                print(f"‚úÖ DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é: {file_ext}")
            
            print(f"‚úÖ DEBUG: –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path} ({file_size} –±–∞–π—Ç)")
            
            return jsonify({
                'success': True,
                'filename': filename,
                'path': file_path,
                'size': file_size,
                'extension': file_ext
            })
            
        except Exception as e:
            print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}'}), 500
            
    except Exception as e:
        print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}'}), 500

@app.before_request
def log_request_info():
    if request.endpoint == 'transcribe_audio_route':
        print(f"üîç DEBUG: –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å: {request.method} {request.path}")
        print(f"üîç DEBUG: Headers: {dict(request.headers)}")
        print(f"üîç DEBUG: Content-Type: {request.content_type}")
        if request.is_json:
            print(f"üîç DEBUG: JSON –¥–∞–Ω–Ω—ã–µ: {request.get_json()}")

@app.route('/transcribe', methods=['POST'])
def transcribe_audio_route():
    print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /transcribe")
    print(f"üîç DEBUG: Content-Type: {request.content_type}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –î–û —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        data = request.get_json()
        print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        
        if not data:
            print(f"‚ùå DEBUG: –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ—Ç—Å—è JSON.'}), 415
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ 'uploads/...' –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏
        raw_file_path = data.get('filepath') or data.get('file_path')  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        language = data.get('language', 'ru')
        model_name = data.get('model', DEFAULT_MODEL_NAME)
        normalized_filename = os.path.basename(raw_file_path) if raw_file_path else None
        print(f"üîç DEBUG: raw_file_path={raw_file_path}, normalized_filename={normalized_filename}, language={language}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if not normalized_filename:
            print(f"‚ùå DEBUG: –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞")
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞'}), 400
        
        # –ò—â–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        upload_folder = app.config['UPLOAD_FOLDER']
        
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        all_files = os.listdir(upload_folder)
        print(f"üîç DEBUG: –í—Å–µ —Ñ–∞–π–ª—ã –≤ uploads: {all_files}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        uploaded_files = [f for f in all_files if f == normalized_filename]
        print(f"üîç DEBUG: –§–∞–π–ª—ã —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º: {uploaded_files}")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
        if not uploaded_files:
            uploaded_files = [f for f in all_files if f.endswith(normalized_filename)]
            print(f"üîç DEBUG: –§–∞–π–ª—ã, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –Ω–∞ {normalized_filename}: {uploaded_files}")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
        if not uploaded_files:
            uploaded_files = [f for f in all_files if normalized_filename in f]
            print(f"üîç DEBUG: –§–∞–π–ª—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ {normalized_filename}: {uploaded_files}")
        
        if not uploaded_files:
            print(f"‚ùå DEBUG: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {normalized_filename}")
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω.'}), 400
        
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        filename = max(uploaded_files, key=lambda f: os.path.getctime(os.path.join(upload_folder, f)))
        filepath = os.path.join(upload_folder, filename)
        print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {filepath}")
        
        def generate():
            try:
                print(f"üîç DEBUG: –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ñ–∞–π–ª–∞: {filepath}")
                if not os.path.exists(filepath):
                    error_data = json.dumps({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'})
                    yield f"event: error\ndata: {error_data}\n\n"
                    return
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
                current_filepath = filepath
                if get_file_type(filepath) == 'video':
                    audio_path = filepath.replace(Path(filepath).suffix, '.wav')
                    progress_data = json.dumps({'progress': 5, 'status': '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ...'})
                    yield f"event: progress\ndata: {progress_data}\n\n"
                    
                    try:
                        success, audio_path_or_error = extract_audio_from_video_fast(filepath, audio_path)
                        if not success:
                            error_msg = audio_path_or_error
                            if 'audio stream' in str(error_msg).lower() or 'no audio' in str(error_msg).lower():
                                error_msg = '–í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ –¥–æ—Ä–æ–∂–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ —Å –∞—É–¥–∏–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª.'
                            elif 'codec' in str(error_msg).lower():
                                error_msg = '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞—É–¥–∏–æ –∫–æ–¥–µ–∫ –≤ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ MP4 —Å AAC –∞—É–¥–∏–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é.'
                            else:
                                error_msg = f'–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ: {error_msg}'
                            
                            error_data = json.dumps({'error': error_msg})
                            yield f"event: error\ndata: {error_data}\n\n"
                            return
                        current_filepath = audio_path
                    except Exception as e:
                        error_data = json.dumps({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}'})
                        yield f"event: error\ndata: {error_data}\n\n"
                        return
                    
                    current_filepath = audio_path
                
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
                for progress_data in transcribe_audio_ultra_fast(current_filepath, language, model_name):
                    data_str = json.dumps(progress_data)
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è SSE
                    event_type = 'message'
                    if isinstance(progress_data, dict):
                        if 'error' in progress_data:
                            event_type = 'error'
                        elif ('text' in progress_data) or ('segments' in progress_data):
                            event_type = 'result'
                        elif 'progress' in progress_data:
                            event_type = 'progress'
                        elif 'status' in progress_data:
                            event_type = 'status'
                    yield f"event: {event_type}\ndata: {data_str}\n\n"
                
                # –Ø–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
                try:
                    yield f"event: done\ndata: {json.dumps({'success': True})}\n\n"
                except Exception:
                    pass
                    
            except Exception as e:
                print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ: {str(e)}")
                error_data = json.dumps({'error': f'–û—à–∏–±–∫–∞: {str(e)}'})
                yield f"event: error\ndata: {error_data}\n\n"
        
        print(f"üîç DEBUG: –°–æ–∑–¥–∞–µ–º Response —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º")
        response = Response(generate(), mimetype='text/event-stream', headers={
            'Cache-Control': 'no-cache, no-transform',
            'Access-Control-Allow-Origin': '*',
            'X-Accel-Buffering': 'no'
        })
        print(f"üîç DEBUG: Response —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return response
        
    except Exception as e:
        print(f"‚ùå DEBUG: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ transcribe_audio_route: {str(e)}")
        return jsonify({'error': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}'}), 500

# @app.route('/generate_protocol', methods=['POST'])
# def generate_protocol_route():
#     # –û—Ç–∫–ª—é—á–µ–Ω–æ: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
#     pass



# @app.route('/download_protocol/<filename>')
# def download_protocol(filename):
#     # –û—Ç–∫–ª—é—á–µ–Ω–æ: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
#     pass

# @app.route('/cleanup', methods=['POST'])
# def cleanup_session():
#     # –û—Ç–∫–ª—é—á–µ–Ω–æ: –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
#     pass

# @app.route('/health')  # disabled duplicate; keeping earlier health_check
def health_check_duplicate_disabled():
    return jsonify({
        'status': 'ok',
        'message': 'Server is running'
    })

# @app.route('/upload_text_file', methods=['POST'])
# def upload_text_file():
#     # –û—Ç–∫–ª—é—á–µ–Ω–æ: –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
#     pass

# @app.route('/generate_protocol_from_file', methods=['POST'])
# def generate_protocol_from_file_route():
#     # –û—Ç–∫–ª—é—á–µ–Ω–æ: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏–∑ —Ñ–∞–π–ª–∞ –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
#     pass

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–û–ì–û —Å–µ—Ä–≤–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...")
    print(f"‚ö° –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_MODEL_NAME} (—Å–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è)")
    print(f"üíª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    print(f"üîß –ú–∞–∫—Å–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤: {MAX_WORKERS}")
    print(f"‚è±Ô∏è –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: {CHUNK_DURATION} —Å–µ–∫")
    print("üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
    print("   –ê—É–¥–∏–æ:", ', '.join(ALLOWED_EXTENSIONS['audio']))
    print("   –í–∏–¥–µ–æ:", ', '.join(ALLOWED_EXTENSIONS['video']))
    print(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ http://localhost:{PORT}")
    
    app.run(host='0.0.0.0', port=PORT, debug=False, threaded=True)