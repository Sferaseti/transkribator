#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
–í–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import json
import math
import time
import subprocess
import logging
import threading
import concurrent.futures
from pathlib import Path
from datetime import datetime
from flask import Flask, request, jsonify, render_template, Response, send_file, session
from werkzeug.utils import secure_filename
import whisper
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 500 * 1024 * 1024  # 500MB
app.secret_key = os.getenv('SECRET_KEY', 'dev-secret-key-change-in-production')

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs('.taskmaster/protocols', exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
openai_client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

# –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
SPEED_MODE = os.getenv('SPEED_MODE', 'balanced')  # fast, balanced, quality
USE_GPU = os.getenv('USE_GPU', 'auto')  # true, false, auto
MAX_WORKERS = int(os.getenv('MAX_WORKERS', '4'))  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
MODEL_CONFIGS = {
    'fast': {
        'model': 'base',  # ~39MB, —Å–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è
        'chunk_duration': 120,  # 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        'fp16': True,  # –í–∫–ª—é—á–∞–µ–º FP16 –¥–ª—è GPU
        'beam_size': 3,  # –ë–∞–∑–æ–≤—ã–π beam search
        'best_of': 3,
        'temperature': 0.0  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
    },
    'balanced': {
        'model': 'medium',  # ~769MB, –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        'chunk_duration': 180,  # 3 –º–∏–Ω—É—Ç—ã
        'fp16': True,
        'beam_size': 5,
        'best_of': 5,
        'temperature': 0.0
    },
    'quality': {
        'model': 'large',  # ~1.5GB, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        'chunk_duration': 240,  # 4 –º–∏–Ω—É—Ç—ã
        'fp16': True,
        'beam_size': 10,
        'best_of': 10,
        'temperature': 0.0
    }
}

config = MODEL_CONFIGS.get(SPEED_MODE, MODEL_CONFIGS['balanced'])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Whisper
print(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper ({config['model']}) –≤ —Ä–µ–∂–∏–º–µ {SPEED_MODE}...")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç GPU –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞)
device = 'cpu'
if USE_GPU == 'auto' or USE_GPU == 'true':
    try:
        import torch
        if torch.cuda.is_available():
            device = 'cuda'
            print("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è NVIDIA GPU –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è")
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CUDA
            torch.backends.cudnn.benchmark = True
        else:
            print("‚ö†Ô∏è GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU.")
    except ImportError:
        print("‚ö†Ô∏è PyTorch –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU.")
else:
    print("üíª –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è quality —Ä–µ–∂–∏–º–∞)")

model = whisper.load_model(
    config['model'],
    device=device,
    download_root=os.path.expanduser('~/.cache/whisper')
)
print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

ALLOWED_EXTENSIONS = {
    'audio': ['.mp3', '.wav', '.m4a', '.ogg', '.flac', '.wma'],
    'video': ['.mp4', '.avi', '.mov', '.mkv', '.flv', '.webm', '.m4v', '.wmv']
}

def allowed_file(filename):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤"""
    return '.' in filename and \
           any(filename.lower().endswith(ext) for ext_list in ALLOWED_EXTENSIONS.values() for ext in ext_list)

def get_file_type(filename):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ (–∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ)"""
    filename_lower = filename.lower()
    if any(filename_lower.endswith(ext) for ext in ALLOWED_EXTENSIONS['audio']):
        return 'audio'
    elif any(filename_lower.endswith(ext) for ext in ALLOWED_EXTENSIONS['video']):
        return 'video'
    return None

def get_audio_duration(audio_path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if not os.path.exists(audio_path):
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
            return 0
            
        file_size = os.path.getsize(audio_path)
        if file_size == 0:
            logger.error(f"–§–∞–π–ª –ø—É—Å—Ç–æ–π: {audio_path}")
            return 0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        cmd = ['ffmpeg', '-i', audio_path, '-f', 'null', '-']
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        # –ò—â–µ–º Duration –≤ stderr
        for line in result.stderr.split('\n'):
            if 'Duration:' in line:
                duration_str = line.split('Duration:')[1].split(',')[0].strip()
                # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç HH:MM:SS.ms
                time_parts = duration_str.split(':')
                if len(time_parts) == 3:
                    hours = float(time_parts[0])
                    minutes = float(time_parts[1])
                    seconds = float(time_parts[2])
                    total_seconds = hours * 3600 + minutes * 60 + seconds
                    return total_seconds
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ ffprobe
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ Duration –≤ ffmpeg, –ø—Ä–æ–±—É–µ–º ffprobe –¥–ª—è {audio_path}")
        cmd_probe = ['ffprobe', '-v', 'quiet', '-show_entries', 'format=duration', 
                    '-of', 'csv=p=0', audio_path]
        result_probe = subprocess.run(cmd_probe, capture_output=True, text=True, timeout=15)
        
        if result_probe.returncode == 0 and result_probe.stdout.strip():
            duration = float(result_probe.stdout.strip())
            return duration
            
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ {audio_path}")
        return 0
        
    except subprocess.TimeoutExpired:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ {audio_path}")
        return 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ {audio_path}: {e}")
        return 0

def extract_audio_from_video(video_path, audio_path):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    cmd = [
        'ffmpeg', '-i', video_path, '-vn', '-acodec', 'libmp3lame',
        '-ar', '16000', '-ac', '1', '-b:a', '64k', audio_path, '-y'
    ]
    try:
        subprocess.run(cmd, check=True, capture_output=True, timeout=300)
        return True
    except (subprocess.CalledProcessError, subprocess.TimeoutExpired) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
        return False

def chunk_audio_file_parallel(audio_path, chunk_duration=None):
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∞—É–¥–∏–æ –Ω–∞ —á–∞–Ω–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    if chunk_duration is None:
        chunk_duration = config['chunk_duration']
        
    duration = get_audio_duration(audio_path)
    if duration <= chunk_duration:
        return [audio_path]
    
    num_chunks = math.ceil(duration / chunk_duration)
    chunks = []
    
    def create_chunk(i):
        start_time = i * chunk_duration
        chunk_path = f"{audio_path}_chunk_{i}.wav"
        
        # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        actual_duration = min(chunk_duration, duration - start_time)
        if actual_duration < 2.0:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –¥–æ 2 —Å–µ–∫—É–Ω–¥
            logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —á–∞–Ω–∫ {i} ({actual_duration:.2f} —Å–µ–∫)")
            return None
        
        cmd = [
            'ffmpeg', '-i', audio_path, '-ss', str(start_time),
            '-t', str(actual_duration), '-acodec', 'pcm_s16le',
            '-ar', '16000', '-ac', '1', '-threads', '1',
            chunk_path, '-y'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, timeout=120)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(chunk_path):
                file_size = os.path.getsize(chunk_path)
                if file_size < 5120:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–æ 5KB
                    logger.warning(f"–ß–∞–Ω–∫ {i} —Å–ª–∏—à–∫–æ–º –º–∞–ª ({file_size} –±–∞–π—Ç), —É–¥–∞–ª—è–µ–º")
                    try:
                        os.remove(chunk_path)
                    except:
                        pass
                    return None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞
                try:
                    chunk_duration_actual = get_audio_duration(chunk_path)
                    if chunk_duration_actual < 1.5:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 1.5 —Å–µ–∫—É–Ω–¥—ã
                        logger.warning(f"–ß–∞–Ω–∫ {i} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({chunk_duration_actual:.2f} —Å–µ–∫), —É–¥–∞–ª—è–µ–º")
                        try:
                            os.remove(chunk_path)
                        except:
                            pass
                        return None
                        
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ
                    try:
                        import whisper
                        test_audio = whisper.load_audio(chunk_path)
                        if len(test_audio) < 8000:  # –ú–µ–Ω–µ–µ 0.5 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ 16kHz
                            logger.warning(f"–ß–∞–Ω–∫ {i} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö ({len(test_audio)} —Å—ç–º–ø–ª–æ–≤), —É–¥–∞–ª—è–µ–º")
                            try:
                                os.remove(chunk_path)
                            except:
                                pass
                            return None
                    except:
                        pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—É–¥–∏–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º —á–∞–Ω–∫
                        
                except:
                    pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º —á–∞–Ω–∫
                
                return chunk_path
            else:
                logger.error(f"–ß–∞–Ω–∫ {i} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
                return None
                
        except (subprocess.CalledProcessError, subprocess.TimeoutExpired) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞ {i}: {e}")
            return None
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤
    with concurrent.futures.ThreadPoolExecutor(max_workers=min(MAX_WORKERS, num_chunks)) as executor:
        chunk_futures = [executor.submit(create_chunk, i) for i in range(num_chunks)]
        
        for future in concurrent.futures.as_completed(chunk_futures):
            chunk_path = future.result()
            if chunk_path:
                chunks.append(chunk_path)
    
    return sorted(chunks)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞

def transcribe_chunk(chunk_path, language=None):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —á–∞–Ω–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CUDA
        device = "cuda" if torch.cuda.is_available() else "cpu"
        if device == "cuda":
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è CUDA
            torch.backends.cudnn.benchmark = True
            if hasattr(torch.backends, 'cuda'):
                torch.backends.cuda.matmul.allow_tf32 = True
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        transcribe_options = {
            "language": language,
            "word_timestamps": True,
            "fp16": config['fp16'],
            "temperature": config['temperature'],
            "compression_ratio_threshold": config['compression_ratio_threshold'],
            "logprob_threshold": config['logprob_threshold'],
            "no_speech_threshold": config['no_speech_threshold'],
            "condition_on_previous_text": True,
            "initial_prompt": None
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ quality
        if SPEED_MODE == 'quality':
            transcribe_options.update({
                "beam_size": config['beam_size'],
                "best_of": config['best_of'],
                "patience": config['patience'],
                "temperature": [0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
                "compression_ratio_threshold": 2.4,
                "logprob_threshold": -1.0,
                "no_speech_threshold": 0.6
            })
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
        result = model.transcribe(chunk_path, **transcribe_options)
        
        if not result or not result.get("text", "").strip():
            logger.warning(f"–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —á–∞–Ω–∫–∞ {chunk_path}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
        if "segments" in result:
            formatted_segments = []
            for segment in result["segments"]:
                if not isinstance(segment, dict) or not segment.get("text"):
                    continue
                    
                formatted_segment = {
                    "start": float(segment.get("start", 0)),
                    "end": float(segment.get("end", 0)),
                    "text": segment["text"].strip()
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ —Å–ª–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
                if "words" in segment:
                    formatted_segment["words"] = [
                        {
                            "start": float(word.get("start", 0)),
                            "end": float(word.get("end", 0)),
                            "text": word["text"].strip(),
                            "probability": float(word.get("probability", 0))
                        }
                        for word in segment["words"]
                        if isinstance(word, dict) and word.get("text")
                    ]
                
                formatted_segments.append(formatted_segment)
            
            result["segments"] = formatted_segments
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —á–∞–Ω–∫–∞ {chunk_path}: {str(e)}")
        return None

def transcribe_audio_with_progress_optimized(audio_path, language=None):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞
        if not os.path.exists(audio_path):
            raise ValueError(f"–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
            
        file_size = os.path.getsize(audio_path)
        if file_size == 0:
            raise ValueError("–ê—É–¥–∏–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π (0 –±–∞–π—Ç)")
            
        if file_size < 1024:
            raise ValueError(f"–ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª ({file_size} –±–∞–π—Ç)")
        
        duration = get_audio_duration(audio_path)
        
        if duration <= 0:
            logger.warning(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª {audio_path} —á–µ—Ä–µ–∑ Whisper")
            yield {"progress": 10, "status": "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."}
            
            try:
                audio = whisper.load_audio(audio_path)
                if len(audio) == 0:
                    raise ValueError("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö")
                duration = len(audio) / 16000
                logger.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ Whisper: {duration:.2f} —Å–µ–∫")
            except Exception as e:
                raise ValueError(f"–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: {str(e)}")
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏
        chunk_duration = config['chunk_duration']
        num_chunks = math.ceil(duration / chunk_duration)
        
        if num_chunks == 0:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —á–∞–Ω–∫–æ–≤
        temp_dir = tempfile.mkdtemp()
        chunks = []
        
        yield {"progress": 20, "status": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —á–∞–Ω–∫–æ–≤..."}
        
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º –¥–ª—è quality —Ä–µ–∂–∏–º–∞
            overlap = 2 if SPEED_MODE == 'quality' else 0  # 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
            for i in range(num_chunks):
                start_time = i * chunk_duration
                end_time = min((i + 1) * chunk_duration + overlap, duration)
                
                chunk_path = os.path.join(temp_dir, f"chunk_{i}.wav")
                ffmpeg_extract_subclip(audio_path, start_time, end_time, chunk_path)
                chunks.append(chunk_path)
                
                progress = 20 + (30 * (i + 1) / num_chunks)
                yield {"progress": progress, "status": f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —á–∞–Ω–∫ {i + 1} –∏–∑ {num_chunks}"}
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–∏ –Ω–∞ —á–∞–Ω–∫–∏: {str(e)}")
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–∏ –Ω–∞ —á–∞–Ω–∫–∏: {str(e)}")
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —á–∞–Ω–∫–æ–≤
        results = []
        with concurrent.futures.ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
            future_to_chunk = {
                executor.submit(transcribe_chunk, chunk, language): (i, chunk)
                for i, chunk in enumerate(chunks)
            }
            
            completed = 0
            for future in concurrent.futures.as_completed(future_to_chunk):
                chunk_idx, chunk_path = future_to_chunk[future]
                try:
                    result = future.result()
                    if result:
                        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        if SPEED_MODE == 'quality' and chunk_idx > 0:
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —á–∞–Ω–∫–∞)
                            result['segments'] = [
                                seg for seg in result['segments']
                                if seg['start'] >= 2.0
                            ]
                        results.append((chunk_idx, result))
                    else:
                        logger.warning(f"–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —á–∞–Ω–∫–∞ {chunk_idx}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ {chunk_idx}: {str(e)}")
                
                completed += 1
                progress = 50 + (45 * completed / len(chunks))
                yield {
                    "progress": progress,
                    "status": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {completed} –∏–∑ {len(chunks)} —á–∞–Ω–∫–æ–≤"
                }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        yield {"progress": 95, "status": "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."}
        
        results.sort(key=lambda x: x[0])  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É —á–∞–Ω–∫–∞
        
        combined_text = ""
        combined_segments = []
        
        for chunk_idx, result in results:
            if not result or not isinstance(result, dict):
                continue
                
            text = result.get("text", "").strip()
            segments = result.get("segments", [])
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è —á–∞–Ω–∫–æ–≤
            time_offset = chunk_idx * chunk_duration
            for segment in segments:
                segment["start"] += time_offset
                segment["end"] += time_offset
                if "words" in segment:
                    for word in segment["words"]:
                        word["start"] += time_offset
                        word["end"] += time_offset
            
            combined_text += " " + text
            combined_segments.extend(segments)
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for chunk in chunks:
            try:
                os.remove(chunk)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {chunk}: {str(e)}")
        try:
            os.rmdir(temp_dir)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {temp_dir}: {str(e)}")
        
        yield {
            "progress": 100,
            "status": "–ì–æ—Ç–æ–≤–æ!",
            "result": {
                "text": combined_text.strip(),
                "segments": combined_segments
            }
        }
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}")
        yield {
            "progress": -1,
            "status": f"–û—à–∏–±–∫–∞: {str(e)}",
            "error": str(e)
        }

def generate_protocol(transcription, meeting_type="general"):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    try:
        prompt = f"""
–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª:

–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:
{transcription}

–¢–∏–ø –≤—Å—Ç—Ä–µ—á–∏: {meeting_type}

–°–æ–∑–¥–∞–π –ø—Ä–æ—Ç–æ–∫–æ–ª –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
# –ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏

**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}
**–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M')}
**–¢–∏–ø –≤—Å—Ç—Ä–µ—á–∏:** {meeting_type}

## –£—á–∞—Å—Ç–Ω–∏–∫–∏
[–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—á–∏]

## –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è
[–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã]

## –ü—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è
[–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏]

## –ó–∞–¥–∞—á–∏ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ
[–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü –∏ —Å—Ä–æ–∫–æ–≤]

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
[–ü–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ –∏ —Å–ª–µ–¥—É—é—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏]

–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏. –ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ—è—Å–Ω–∞, —É–∫–∞–∂–∏ —ç—Ç–æ.
"""
        
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –≤—Å—Ç—Ä–µ—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π."}, 
                {"role": "user", "content": prompt}
            ],
            max_tokens=2000,
            temperature=0.3
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
        raise e

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
    try:
        if 'file' not in request.files:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{timestamp}_{filename}"
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)
            
            session['uploaded_file'] = filepath
            
            return jsonify({
                'success': True,
                'filename': filename,
                'filepath': filepath,
                'file_type': get_file_type(filename)
            })
        else:
            return jsonify({'error': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞'}), 400
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/transcribe', methods=['POST'])
def transcribe_audio_route():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ session –∏ request –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    if 'uploaded_file' not in session or not os.path.exists(session['uploaded_file']):
        error_msg = json.dumps({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–Ω–∞—á–∞–ª–∞.'}, ensure_ascii=False)
        return Response(f"data: {error_msg}\n\n", mimetype='text/event-stream')
    
    filepath = session['uploaded_file']
    language = request.form.get('language', 'auto')
    
    def generate():
        try:
            current_audio_path = filepath
            
            # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª, –∏–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
            if get_file_type(filepath) == 'video':
                audio_filename = f"audio_{os.path.basename(filepath)}.wav"
                current_audio_path = os.path.join(app.config['UPLOAD_FOLDER'], audio_filename)
                
                yield f"data: {json.dumps({'progress': 5, 'status': '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ...'}, ensure_ascii=False)}\n\n"
                
                if not extract_audio_from_video(filepath, current_audio_path):
                    yield f"data: {json.dumps({'error': '–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ'}, ensure_ascii=False)}\n\n"
                    return
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            for progress_data in transcribe_audio_with_progress_optimized(current_audio_path, language):
                yield f"data: {json.dumps(progress_data, ensure_ascii=False)}\n\n"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ generate(): {e}")
            yield f"data: {json.dumps({'error': str(e)}, ensure_ascii=False)}\n\n"
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if current_audio_path != filepath and os.path.exists(current_audio_path):
                try:
                    os.remove(current_audio_path)
                except:
                    pass
    
    return Response(generate(), mimetype='text/event-stream')

@app.route('/generate_protocol', methods=['POST'])
def generate_protocol_route():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    try:
        data = request.json
        transcription = data.get('transcription', '')
        meeting_type = data.get('meeting_type', 'general')
        
        if not transcription:
            return jsonify({'error': '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞'}), 400
        
        protocol = generate_protocol(transcription, meeting_type)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        protocol_filename = f"protocol_{timestamp}.md"
        protocol_path = os.path.join('.taskmaster/protocols', protocol_filename)
        
        with open(protocol_path, 'w', encoding='utf-8') as f:
            f.write(protocol)
        
        return jsonify({
            'success': True,
            'protocol': protocol,
            'filename': protocol_filename
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/download_protocol/<filename>')
def download_protocol(filename):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    try:
        protocol_path = os.path.join('.taskmaster/protocols', filename)
        if os.path.exists(protocol_path):
            return send_file(protocol_path, as_attachment=True)
        else:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/cleanup', methods=['POST'])
def cleanup_session():
    """–û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
    try:
        if 'uploaded_file' in session:
            file_path = session['uploaded_file']
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                except:
                    pass
            session.pop('uploaded_file', None)
        
        return jsonify({'success': True})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'speed_mode': SPEED_MODE,
        'model': config['model'],
        'device': device
    })

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏
SPEED_CONFIGS = {
    'fast': {
        'model_name': 'small',
        'chunk_duration': 5 * 60,  # 5 –º–∏–Ω—É—Ç
        'fp16': True,
        'beam_size': 1,
        'best_of': 1,
        'temperature': 0.0,
        'compression_ratio_threshold': 2.4,
        'logprob_threshold': -1.0,
        'no_speech_threshold': 0.6,
        'patience': None
    },
    'balanced': {
        'model_name': 'medium',
        'chunk_duration': 3 * 60,  # 3 –º–∏–Ω—É—Ç—ã
        'fp16': True,
        'beam_size': 3,
        'best_of': 3,
        'temperature': 0.2,
        'compression_ratio_threshold': 2.2,
        'logprob_threshold': -0.8,
        'no_speech_threshold': 0.4,
        'patience': 1
    },
    'quality': {
        'model_name': 'large',
        'chunk_duration': 2 * 60,  # 2 –º–∏–Ω—É—Ç—ã
        'fp16': True,
        'beam_size': 5,
        'best_of': 5,
        'temperature': [0.0, 0.2, 0.4, 0.6, 0.8, 1.0],
        'compression_ratio_threshold': 2.0,
        'logprob_threshold': -0.5,
        'no_speech_threshold': 0.3,
        'patience': 2
    }
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
MAX_WORKERS = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
CACHE_DIR = os.path.join(os.path.expanduser("~"), ".cache", "whisper")  # –ö—ç—à –¥–ª—è –º–æ–¥–µ–ª–µ–π

# –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Å–∫–æ—Ä–æ—Å—Ç–∏
SPEED_MODE = 'quality'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
config = SPEED_CONFIGS[SPEED_MODE]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
def initialize_model():
    global model
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(CACHE_DIR, exist_ok=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CUDA
        device = "cuda" if torch.cuda.is_available() else "cpu"
        if device == "cuda":
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è CUDA
            torch.backends.cudnn.benchmark = True
            if hasattr(torch.backends, 'cuda'):
                torch.backends.cuda.matmul.allow_tf32 = True
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
        model = whisper.load_model(
            config['model_name'],
            device=device,
            download_root=CACHE_DIR,
            in_memory=True
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è CPU, –µ—Å–ª–∏ CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        if device == "cpu":
            if torch.backends.mkldnn.is_available():
                torch.backends.mkldnn.enabled = True
            torch.set_num_threads(4)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        
        logger.info(f"–ú–æ–¥–µ–ª—å {config['model_name']} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞ {device}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if not initialize_model():
    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å Whisper")
@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
    try:
        if 'file' not in request.files:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{timestamp}_{filename}"
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)
            
            session['uploaded_file'] = filepath
            
            return jsonify({
                'success': True,
                'filename': filename,
                'filepath': filepath,
                'file_type': get_file_type(filename)
            })
        else:
            return jsonify({'error': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞'}), 400
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/transcribe', methods=['POST'])
def transcribe_audio_route():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ session –∏ request –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    if 'uploaded_file' not in session or not os.path.exists(session['uploaded_file']):
        error_msg = json.dumps({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–Ω–∞—á–∞–ª–∞.'}, ensure_ascii=False)
        return Response(f"data: {error_msg}\n\n", mimetype='text/event-stream')
    
    filepath = session['uploaded_file']
    language = request.form.get('language', 'auto')
    
    def generate():
        try:
            current_audio_path = filepath
            
            # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª, –∏–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
            if get_file_type(filepath) == 'video':
                audio_filename = f"audio_{os.path.basename(filepath)}.wav"
                current_audio_path = os.path.join(app.config['UPLOAD_FOLDER'], audio_filename)
                
                yield f"data: {json.dumps({'progress': 5, 'status': '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ...'}, ensure_ascii=False)}\n\n"
                
                if not extract_audio_from_video(filepath, current_audio_path):
                    yield f"data: {json.dumps({'error': '–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ'}, ensure_ascii=False)}\n\n"
                    return
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            for progress_data in transcribe_audio_with_progress_optimized(current_audio_path, language):
                yield f"data: {json.dumps(progress_data, ensure_ascii=False)}\n\n"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ generate(): {e}")
            yield f"data: {json.dumps({'error': str(e)}, ensure_ascii=False)}\n\n"
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if current_audio_path != filepath and os.path.exists(current_audio_path):
                try:
                    os.remove(current_audio_path)
                except:
                    pass
    
    return Response(generate(), mimetype='text/event-stream')

@app.route('/generate_protocol', methods=['POST'])
def generate_protocol_route():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    try:
        data = request.json
        transcription = data.get('transcription', '')
        meeting_type = data.get('meeting_type', 'general')
        
        if not transcription:
            return jsonify({'error': '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞'}), 400
        
        protocol = generate_protocol(transcription, meeting_type)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        protocol_filename = f"protocol_{timestamp}.md"
        protocol_path = os.path.join('.taskmaster/protocols', protocol_filename)
        
        with open(protocol_path, 'w', encoding='utf-8') as f:
            f.write(protocol)
        
        return jsonify({
            'success': True,
            'protocol': protocol,
            'filename': protocol_filename
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/download_protocol/<filename>')
def download_protocol(filename):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    try:
        protocol_path = os.path.join('.taskmaster/protocols', filename)
        if os.path.exists(protocol_path):
            return send_file(protocol_path, as_attachment=True)
        else:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/cleanup', methods=['POST'])
def cleanup_session():
    """–û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
    try:
        if 'uploaded_file' in session:
            file_path = session['uploaded_file']
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                except:
                    pass
            session.pop('uploaded_file', None)
        
        return jsonify({'success': True})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'speed_mode': SPEED_MODE,
        'model': config['model'],
        'device': device
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û —Å–µ—Ä–≤–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...")
    print(f"‚ö° –†–µ–∂–∏–º —Å–∫–æ—Ä–æ—Å—Ç–∏: {SPEED_MODE}")
    print(f"üß† –ú–æ–¥–µ–ª—å: {config['model']}")
    print(f"üíª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    print(f"üîß –ú–∞–∫—Å–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤: {MAX_WORKERS}")
    print("üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
    print("   –ê—É–¥–∏–æ:", ', '.join(ALLOWED_EXTENSIONS['audio']))
    print("   –í–∏–¥–µ–æ:", ', '.join(ALLOWED_EXTENSIONS['video']))
    print("üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ http://localhost:5007")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ –¥—Ä—É–≥–æ–º –ø–æ—Ä—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    app.run(host='0.0.0.0', port=5007, debug=False, threaded=True)