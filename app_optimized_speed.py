#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
–í–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import json
import math
import time
import subprocess
import logging
import threading
import concurrent.futures
from pathlib import Path
from datetime import datetime
from flask import Flask, request, jsonify, render_template, Response, send_file, session
from werkzeug.utils import secure_filename
import whisper
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 500 * 1024 * 1024  # 500MB
app.secret_key = os.getenv('SECRET_KEY', 'dev-secret-key-change-in-production')

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs('.taskmaster/protocols', exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
openai_client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

# –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
SPEED_MODE = os.getenv('SPEED_MODE', 'balanced')  # fast, balanced, quality
USE_GPU = os.getenv('USE_GPU', 'auto')  # true, false, auto
MAX_WORKERS = int(os.getenv('MAX_WORKERS', '4'))  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
MODEL_CONFIGS = {
    'fast': {
        'model': 'base',  # ~39MB, —Å–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è
        'chunk_duration': 180,  # 3 –º–∏–Ω—É—Ç—ã
        'fp16': False  # –û—Ç–∫–ª—é—á–∞–µ–º FP16 –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ CPU
    },
    'balanced': {
        'model': 'small',  # ~244MB, —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å
        'chunk_duration': 240,  # 4 –º–∏–Ω—É—Ç—ã
        'fp16': False
    },
    'quality': {
        'model': 'medium',  # ~769MB, –ª—É—á—à–µ —á–µ–º large –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏
        'chunk_duration': 300,  # 5 –º–∏–Ω—É—Ç
        'fp16': False
    }
}

config = MODEL_CONFIGS.get(SPEED_MODE, MODEL_CONFIGS['balanced'])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Whisper
print(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper ({config['model']}) –≤ —Ä–µ–∂–∏–º–µ {SPEED_MODE}...")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ CPU –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
device = 'cpu'
if USE_GPU == 'true':
    try:
        import torch
        if torch.cuda.is_available():
            device = 'cuda'
            print("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è NVIDIA GPU –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è")
        else:
            print("‚ö†Ô∏è GPU –∑–∞–ø—Ä–æ—à–µ–Ω, –Ω–æ CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU.")
    except ImportError:
        print("‚ö†Ô∏è PyTorch –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU.")
else:
    print("üíª –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)")

model = whisper.load_model(config['model'], device=device)
print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

ALLOWED_EXTENSIONS = {
    'audio': ['.mp3', '.wav', '.m4a', '.ogg', '.flac', '.wma'],
    'video': ['.mp4', '.avi', '.mov', '.mkv', '.flv', '.webm', '.m4v', '.wmv']
}

def allowed_file(filename):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤"""
    return '.' in filename and \
           any(filename.lower().endswith(ext) for ext_list in ALLOWED_EXTENSIONS.values() for ext in ext_list)

def get_file_type(filename):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ (–∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ)"""
    filename_lower = filename.lower()
    if any(filename_lower.endswith(ext) for ext in ALLOWED_EXTENSIONS['audio']):
        return 'audio'
    elif any(filename_lower.endswith(ext) for ext in ALLOWED_EXTENSIONS['video']):
        return 'video'
    return None

def get_audio_duration(audio_path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if not os.path.exists(audio_path):
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
            return 0
            
        file_size = os.path.getsize(audio_path)
        if file_size == 0:
            logger.error(f"–§–∞–π–ª –ø—É—Å—Ç–æ–π: {audio_path}")
            return 0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        cmd = ['ffmpeg', '-i', audio_path, '-f', 'null', '-']
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        # –ò—â–µ–º Duration –≤ stderr
        for line in result.stderr.split('\n'):
            if 'Duration:' in line:
                duration_str = line.split('Duration:')[1].split(',')[0].strip()
                # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç HH:MM:SS.ms
                time_parts = duration_str.split(':')
                if len(time_parts) == 3:
                    hours = float(time_parts[0])
                    minutes = float(time_parts[1])
                    seconds = float(time_parts[2])
                    total_seconds = hours * 3600 + minutes * 60 + seconds
                    return total_seconds
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ ffprobe
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ Duration –≤ ffmpeg, –ø—Ä–æ–±—É–µ–º ffprobe –¥–ª—è {audio_path}")
        cmd_probe = ['ffprobe', '-v', 'quiet', '-show_entries', 'format=duration', 
                    '-of', 'csv=p=0', audio_path]
        result_probe = subprocess.run(cmd_probe, capture_output=True, text=True, timeout=15)
        
        if result_probe.returncode == 0 and result_probe.stdout.strip():
            duration = float(result_probe.stdout.strip())
            return duration
            
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ {audio_path}")
        return 0
        
    except subprocess.TimeoutExpired:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ {audio_path}")
        return 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ {audio_path}: {e}")
        return 0

def extract_audio_from_video(video_path, audio_path):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    cmd = [
        'ffmpeg', '-i', video_path, '-vn', '-acodec', 'libmp3lame',
        '-ar', '16000', '-ac', '1', '-b:a', '64k', audio_path, '-y'
    ]
    try:
        subprocess.run(cmd, check=True, capture_output=True, timeout=300)
        return True
    except (subprocess.CalledProcessError, subprocess.TimeoutExpired) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
        return False

def chunk_audio_file_parallel(audio_path, chunk_duration=None):
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∞—É–¥–∏–æ –Ω–∞ —á–∞–Ω–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    if chunk_duration is None:
        chunk_duration = config['chunk_duration']
        
    duration = get_audio_duration(audio_path)
    if duration <= chunk_duration:
        return [audio_path]
    
    num_chunks = math.ceil(duration / chunk_duration)
    chunks = []
    
    def create_chunk(i):
        start_time = i * chunk_duration
        chunk_path = f"{audio_path}_chunk_{i}.wav"
        
        # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        actual_duration = min(chunk_duration, duration - start_time)
        if actual_duration < 2.0:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –¥–æ 2 —Å–µ–∫—É–Ω–¥
            logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —á–∞–Ω–∫ {i} ({actual_duration:.2f} —Å–µ–∫)")
            return None
        
        cmd = [
            'ffmpeg', '-i', audio_path, '-ss', str(start_time),
            '-t', str(actual_duration), '-acodec', 'pcm_s16le',
            '-ar', '16000', '-ac', '1', '-threads', '1',
            chunk_path, '-y'
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, timeout=120)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(chunk_path):
                file_size = os.path.getsize(chunk_path)
                if file_size < 5120:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–æ 5KB
                    logger.warning(f"–ß–∞–Ω–∫ {i} —Å–ª–∏—à–∫–æ–º –º–∞–ª ({file_size} –±–∞–π—Ç), —É–¥–∞–ª—è–µ–º")
                    try:
                        os.remove(chunk_path)
                    except:
                        pass
                    return None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞
                try:
                    chunk_duration_actual = get_audio_duration(chunk_path)
                    if chunk_duration_actual < 1.5:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 1.5 —Å–µ–∫—É–Ω–¥—ã
                        logger.warning(f"–ß–∞–Ω–∫ {i} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({chunk_duration_actual:.2f} —Å–µ–∫), —É–¥–∞–ª—è–µ–º")
                        try:
                            os.remove(chunk_path)
                        except:
                            pass
                        return None
                        
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ
                    try:
                        import whisper
                        test_audio = whisper.load_audio(chunk_path)
                        if len(test_audio) < 8000:  # –ú–µ–Ω–µ–µ 0.5 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ 16kHz
                            logger.warning(f"–ß–∞–Ω–∫ {i} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö ({len(test_audio)} —Å—ç–º–ø–ª–æ–≤), —É–¥–∞–ª—è–µ–º")
                            try:
                                os.remove(chunk_path)
                            except:
                                pass
                            return None
                    except:
                        pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—É–¥–∏–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º —á–∞–Ω–∫
                        
                except:
                    pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º —á–∞–Ω–∫
                
                return chunk_path
            else:
                logger.error(f"–ß–∞–Ω–∫ {i} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
                return None
                
        except (subprocess.CalledProcessError, subprocess.TimeoutExpired) as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞ {i}: {e}")
            return None
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤
    with concurrent.futures.ThreadPoolExecutor(max_workers=min(MAX_WORKERS, num_chunks)) as executor:
        chunk_futures = [executor.submit(create_chunk, i) for i in range(num_chunks)]
        
        for future in concurrent.futures.as_completed(chunk_futures):
            chunk_path = future.result()
            if chunk_path:
                chunks.append(chunk_path)
    
    return sorted(chunks)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞

def transcribe_chunk(chunk_path, language=None):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if not os.path.exists(chunk_path):
            logger.warning(f"–ß–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {chunk_path}")
            return None
            
        file_size = os.path.getsize(chunk_path)
        if file_size < 1024:  # –ú–µ–Ω–µ–µ 1KB
            logger.warning(f"–ß–∞–Ω–∫ —Å–ª–∏—à–∫–æ–º –º–∞–ª ({file_size} –±–∞–π—Ç): {chunk_path}")
            return {
                "text": "",
                "segments": [],
                "warning": f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª ({file_size} –±–∞–π—Ç)"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Whisper —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        try:
            audio = whisper.load_audio(chunk_path)
            if len(audio) == 0:
                logger.warning(f"–ü—É—Å—Ç—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ —á–∞–Ω–∫–µ: {chunk_path}")
                return {
                    "text": "",
                    "segments": [],
                    "warning": "–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö"
                }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∞—É–¥–∏–æ
            if len(audio) < 1600:  # –ú–µ–Ω–µ–µ 0.1 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ 16kHz
                logger.warning(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ —á–∞–Ω–∫–µ: {chunk_path} ({len(audio)} —Å—ç–º–ø–ª–æ–≤)")
                return {
                    "text": "",
                    "segments": [],
                    "warning": f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ ({len(audio)} —Å—ç–º–ø–ª–æ–≤)"
                }
                
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –∏–∑ —á–∞–Ω–∫–∞ {chunk_path}: {e}")
            return {
                "text": "",
                "segments": [],
                "warning": f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ: {e}"
            }
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            # –£–±–∏—Ä–∞–µ–º language=None —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "Unsupported language: auto"
            if language and language != 'auto':
                result = model.transcribe(
                    audio,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
                    language=language,
                    word_timestamps=True,
                    fp16=config['fp16'],
                    temperature=0,  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    compression_ratio_threshold=2.4,
                    logprob_threshold=-1.0,
                    no_speech_threshold=0.6
                )
            else:
                result = model.transcribe(
                    audio,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
                    word_timestamps=True,
                    fp16=config['fp16'],
                    temperature=0,  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    compression_ratio_threshold=2.4,
                    logprob_threshold=-1.0,
                    no_speech_threshold=0.6
                )
        except Exception as transcribe_error:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
            error_msg = str(transcribe_error)
            if any(keyword in error_msg.lower() for keyword in ["tensor", "reshape", "size mismatch", "dimension"]):
                logger.warning(f"–û—à–∏–±–∫–∞ —Ç–µ–Ω–∑–æ—Ä–æ–≤ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —á–∞–Ω–∫–∞ {chunk_path}: {error_msg}")
                return {
                    "text": "",
                    "segments": [],
                    "error": f"–û—à–∏–±–∫–∞ —Ç–µ–Ω–∑–æ—Ä–æ–≤: {error_msg}"
                }
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —á–∞–Ω–∫–∞ {chunk_path}: {error_msg}")
                return {
                    "text": "",
                    "segments": [],
                    "error": f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {error_msg}"
                }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ None –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        if result is None:
            logger.warning(f"model.transcribe –≤–µ—Ä–Ω—É–ª None –¥–ª—è —á–∞–Ω–∫–∞ {chunk_path}")
            return {
                "text": "",
                "segments": [],
                "error": "model.transcribe –≤–µ—Ä–Ω—É–ª None"
            }
            
        if not isinstance(result, dict):
            logger.warning(f"model.transcribe –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–ª—è —á–∞–Ω–∫–∞ {chunk_path}: {type(result)}")
            return {
                "text": "",
                "segments": [],
                "error": f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}"
            }
            
        if not result.get("text", "").strip():
            logger.warning(f"–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —á–∞–Ω–∫–∞ {chunk_path}")
            return {
                "text": "",
                "segments": [],
                "warning": "–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"
            }
            
        return result
        
    except Exception as e:
        error_msg = str(e)
        if any(keyword in error_msg.lower() for keyword in ["tensor", "reshape", "size mismatch", "dimension"]):
            logger.warning(f"–ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ–Ω–∑–æ—Ä–∞–º–∏ –≤ —á–∞–Ω–∫–µ {chunk_path}: {error_msg}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ {chunk_path}: {error_msg}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–º–µ—Å—Ç–æ None –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return {
            "text": "",
            "segments": [],
            "error": str(e)
        }

def transcribe_audio_with_progress_optimized(audio_path, language=None):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞
        if not os.path.exists(audio_path):
            raise ValueError(f"–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
            
        file_size = os.path.getsize(audio_path)
        if file_size == 0:
            raise ValueError("–ê—É–¥–∏–æ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π (0 –±–∞–π—Ç)")
            
        if file_size < 1024:
            raise ValueError(f"–ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª ({file_size} –±–∞–π—Ç)")
        
        duration = get_audio_duration(audio_path)
        
        if duration <= 0:
            logger.warning(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª {audio_path} —á–µ—Ä–µ–∑ Whisper")
            yield {"progress": 10, "status": "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."}
            
            try:
                audio = whisper.load_audio(audio_path)
                if len(audio) == 0:
                    raise ValueError("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö")
                duration = len(audio) / 16000
                logger.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ Whisper: {duration:.2f} —Å–µ–∫")
            except Exception as e:
                raise ValueError(f"–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: {str(e)}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        duration_limit = config['chunk_duration'] * 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –º–µ–Ω—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞–Ω–∫–æ–≤
        
        if duration > duration_limit:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            yield {"progress": 15, "status": "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏..."}
            chunks = chunk_audio_file_parallel(audio_path, config['chunk_duration'])
            
            if not chunks:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞–Ω–∫–∏")
            
            yield {"progress": 25, "status": f"–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤..."}
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —á–∞–Ω–∫–æ–≤
            full_transcription = []
            all_segments = []
            
            def process_chunk_with_index(args):
                i, chunk_path = args
                return i, transcribe_chunk(chunk_path, language)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            max_parallel = min(MAX_WORKERS, len(chunks), 3)
            
            with concurrent.futures.ThreadPoolExecutor(max_workers=max_parallel) as executor:
                chunk_args = [(i, chunk_path) for i, chunk_path in enumerate(chunks)]
                futures = [executor.submit(process_chunk_with_index, args) for args in chunk_args]
                
                results = {}
                completed = 0
                
                for future in concurrent.futures.as_completed(futures):
                    try:
                        i, result = future.result()
                        results[i] = result
                        completed += 1
                        
                        progress = 25 + int((completed / len(chunks)) * 70)
                        yield {"progress": progress, "status": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {completed}/{len(chunks)} —á–∞–Ω–∫–æ–≤"}
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for i in sorted(results.keys()):
                result = results[i]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ result –Ω–µ None –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if result is not None and isinstance(result, dict) and result.get("text", "").strip():
                    full_transcription.append(result["text"])
                    
                    if "segments" in result and isinstance(result["segments"], list):
                        segments = [{
                            "start": segment.get("start", 0),
                            "end": segment.get("end", 0),
                            "text": segment.get("text", "")
                        } for segment in result["segments"] if isinstance(segment, dict) and segment.get("text")]
                        all_segments.extend(segments)
                else:
                    logger.warning(f"–ß–∞–Ω–∫ {i} –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for chunk_path in chunks:
                if chunk_path != audio_path:
                    try:
                        os.remove(chunk_path)
                    except:
                        pass
            
            if not full_transcription:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω —á–∞–Ω–∫")
                
            yield {
                "progress": 100, 
                "status": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", 
                "result": {
                    "text": " ".join(full_transcription), 
                    "segments": all_segments
                }
            }
        else:
            # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            yield {"progress": 20, "status": "–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞..."}
            yield {"progress": 50, "status": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è..."}
            
            try:
                result = model.transcribe(
                    audio_path, 
                    language=language,
                    word_timestamps=True,
                    fp16=config['fp16'],
                    temperature=0,
                    compression_ratio_threshold=2.4,
                    logprob_threshold=-1.0,
                    no_speech_threshold=0.6
                )
                
                if not result or not result.get("text", "").strip():
                    raise ValueError("–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
                
                segments = []
                if "segments" in result and isinstance(result["segments"], list):
                    segments = [{
                        "start": segment.get("start", 0),
                        "end": segment.get("end", 0),
                        "text": segment.get("text", "")
                    } for segment in result["segments"] if isinstance(segment, dict) and segment.get("text")]
                
                yield {
                    "progress": 100,
                    "status": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                    "result": {
                        "text": result["text"],
                        "segments": segments
                    }
                }
                
            except Exception as e:
                error_msg = str(e)
                if "cannot reshape tensor" in error_msg or "0 elements" in error_msg:
                    raise ValueError(f"–ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–º: {error_msg}")
                else:
                    raise ValueError(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {error_msg}")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ transcribe_audio_with_progress_optimized: {e}")
        raise e

def generate_protocol(transcription, meeting_type="general"):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    try:
        prompt = f"""
–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤—Å—Ç—Ä–µ—á–∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª:

–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:
{transcription}

–¢–∏–ø –≤—Å—Ç—Ä–µ—á–∏: {meeting_type}

–°–æ–∑–¥–∞–π –ø—Ä–æ—Ç–æ–∫–æ–ª –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
# –ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏

**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}
**–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M')}
**–¢–∏–ø –≤—Å—Ç—Ä–µ—á–∏:** {meeting_type}

## –£—á–∞—Å—Ç–Ω–∏–∫–∏
[–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—á–∏]

## –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è
[–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã]

## –ü—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è
[–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏]

## –ó–∞–¥–∞—á–∏ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ
[–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü –∏ —Å—Ä–æ–∫–æ–≤]

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
[–ü–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ –∏ —Å–ª–µ–¥—É—é—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏]

–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏. –ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ—è—Å–Ω–∞, —É–∫–∞–∂–∏ —ç—Ç–æ.
"""
        
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –≤—Å—Ç—Ä–µ—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π."}, 
                {"role": "user", "content": prompt}
            ],
            max_tokens=2000,
            temperature=0.3
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
        raise e

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
    try:
        if 'file' not in request.files:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{timestamp}_{filename}"
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)
            
            session['uploaded_file'] = filepath
            
            return jsonify({
                'success': True,
                'filename': filename,
                'filepath': filepath,
                'file_type': get_file_type(filename)
            })
        else:
            return jsonify({'error': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞'}), 400
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/transcribe', methods=['POST'])
def transcribe_audio_route():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ session –∏ request –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    if 'uploaded_file' not in session or not os.path.exists(session['uploaded_file']):
        error_msg = json.dumps({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–Ω–∞—á–∞–ª–∞.'}, ensure_ascii=False)
        return Response(f"data: {error_msg}\n\n", mimetype='text/event-stream')
    
    filepath = session['uploaded_file']
    language = request.form.get('language', 'auto')
    
    def generate():
        try:
            current_audio_path = filepath
            
            # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª, –∏–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ
            if get_file_type(filepath) == 'video':
                audio_filename = f"audio_{os.path.basename(filepath)}.wav"
                current_audio_path = os.path.join(app.config['UPLOAD_FOLDER'], audio_filename)
                
                yield f"data: {json.dumps({'progress': 5, 'status': '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ...'}, ensure_ascii=False)}\n\n"
                
                if not extract_audio_from_video(filepath, current_audio_path):
                    yield f"data: {json.dumps({'error': '–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ'}, ensure_ascii=False)}\n\n"
                    return
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            for progress_data in transcribe_audio_with_progress_optimized(current_audio_path, language):
                yield f"data: {json.dumps(progress_data, ensure_ascii=False)}\n\n"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ generate(): {e}")
            yield f"data: {json.dumps({'error': str(e)}, ensure_ascii=False)}\n\n"
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if current_audio_path != filepath and os.path.exists(current_audio_path):
                try:
                    os.remove(current_audio_path)
                except:
                    pass
    
    return Response(generate(), mimetype='text/event-stream')

@app.route('/generate_protocol', methods=['POST'])
def generate_protocol_route():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
    try:
        data = request.json
        transcription = data.get('transcription', '')
        meeting_type = data.get('meeting_type', 'general')
        
        if not transcription:
            return jsonify({'error': '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞'}), 400
        
        protocol = generate_protocol(transcription, meeting_type)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        protocol_filename = f"protocol_{timestamp}.md"
        protocol_path = os.path.join('.taskmaster/protocols', protocol_filename)
        
        with open(protocol_path, 'w', encoding='utf-8') as f:
            f.write(protocol)
        
        return jsonify({
            'success': True,
            'protocol': protocol,
            'filename': protocol_filename
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/download_protocol/<filename>')
def download_protocol(filename):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    try:
        protocol_path = os.path.join('.taskmaster/protocols', filename)
        if os.path.exists(protocol_path):
            return send_file(protocol_path, as_attachment=True)
        else:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/cleanup', methods=['POST'])
def cleanup_session():
    """–û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
    try:
        if 'uploaded_file' in session:
            file_path = session['uploaded_file']
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                except:
                    pass
            session.pop('uploaded_file', None)
        
        return jsonify({'success': True})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'speed_mode': SPEED_MODE,
        'model': config['model'],
        'device': device
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û —Å–µ—Ä–≤–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...")
    print(f"‚ö° –†–µ–∂–∏–º —Å–∫–æ—Ä–æ—Å—Ç–∏: {SPEED_MODE}")
    print(f"üß† –ú–æ–¥–µ–ª—å: {config['model']}")
    print(f"üíª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    print(f"üîß –ú–∞–∫—Å–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤: {MAX_WORKERS}")
    print("üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
    print("   –ê—É–¥–∏–æ:", ', '.join(ALLOWED_EXTENSIONS['audio']))
    print("   –í–∏–¥–µ–æ:", ', '.join(ALLOWED_EXTENSIONS['video']))
    print("üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ http://localhost:5007")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ –¥—Ä—É–≥–æ–º –ø–æ—Ä—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    app.run(host='0.0.0.0', port=5007, debug=False, threaded=True)